// —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ querySelector
const fruitsList = document.querySelector('.fruits__list'); // —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
const shuffleButton = document.querySelector('.shuffle__btn'); // –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
const filterButton = document.querySelector('.filter__btn'); // –∫–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const filterButtonClear = document.querySelector('.filterclear__btn');
const sortKindLabel = document.querySelector('.sort__kind'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortTimeLabel = document.querySelector('.sort__time'); // –ø–æ–ª–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortChangeButton = document.querySelector('.sort__change__btn'); // –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortActionButton = document.querySelector('.sort__action__btn'); // –∫–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const kindInput = document.querySelector('.kind__input'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∏–¥–∞
const colorInput = document.querySelector('.color__input'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
const weightInput = document.querySelector('.weight__input'); // –ø–æ–ª–µ —Å –≤–µ—Å–æ–º
const addActionButton = document.querySelector('.add__action__btn'); // –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const minWeight = document.querySelector('.minweight__input');
const maxWeight = document.querySelector('.maxweight__input');

minWeight.value = 0;
maxWeight.value = 0;

// —Å–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
let fruitsJSON = `[
  {"kind": "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", "color": "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "weight": 13},
  {"kind": "üçè –Ø–±–ª–æ–∫–æ", "color": "–∑–µ–ª–µ–Ω—ã–π", "weight": 35},
  {"kind": "üçì –ö–ª—É–±–Ω–∏–∫–∞", "color": "–∫—Ä–∞—Å–Ω—ã–π", "weight": 17},
  {"kind": "üçã –õ–∏–º–æ–Ω", "color": "–∂–µ–ª—Ç—ã–π", "weight": 28},
  {"kind": "üçë –ü–µ—Ä—Å–∏–∫", "color": "—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "weight": 22}
]`;

// –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON –≤ –æ–±—ä–µ–∫—Ç JavaScript
let fruits = JSON.parse(fruitsJSON);

/*** –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ***/

// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
const display = () => {
  // TODO: –æ—á–∏—â–∞–µ–º fruitsList –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
  // —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ fruits
  fruitsList.innerHTML = null;

 // TODO: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç <li> –ø—Ä–∏ –ø–æ–º–æ—â–∏ document.createElement,
 // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ fruitsList –ø—Ä–∏ –ø–æ–º–æ—â–∏ document.appendChild

  for (let i = 0; i < fruits.length; i++) {  
    let divIndex = document.createElement('div');
    divIndex.className = 'fruit_info';
    divIndex.textContent = 'index # ' + i;

    let divKind = document.createElement('div');
    divKind.className = 'fruit_info';
    divKind.textContent = 'kind: ' + fruits[i].kind;

    let divColor = document.createElement('div');
    divColor.className = 'fruit_info';
    divColor.textContent = 'color: ' + fruits[i].color;

    let divWeight = document.createElement('div');
    divWeight.className = 'fruit_info';
    divWeight.textContent = 'weight (–∫–≥): ' + fruits[i].weight;

    let divMain = document.createElement('div');
    divMain.className = 'fruit_info';
    divMain.appendChild(divIndex);
    divMain.appendChild(divKind);
    divMain.appendChild(divColor);
    divMain.appendChild(divWeight);

    let li_block = document.createElement('li');
    switch(fruits[i].color) {
      case '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': li_block.className = 'fruit_item fruit_violet'; 
      break
      case '–∑–µ–ª–µ–Ω—ã–π': li_block.className = 'fruit_item fruit_green';
      break
      case '–∫—Ä–∞—Å–Ω—ã–π': li_block.className = 'fruit_item fruit_red';
      break
      case '–∂–µ–ª—Ç—ã–π': li_block.className = 'fruit_item fruit_yellow';
      break
      case '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': li_block.className = 'fruit_item fruit_lightbrown';
      break
    }
    li_block.innerHTML = divMain.innerHTML;
    fruitsList.appendChild(li_block);
  }
};

// –ø–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
archiveArr = fruits.slice();
display();

/*** –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–ï ***/

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const getRandomInt = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
const shuffleFruits = () => {
  let result = [];
  controlArr = fruits.slice();

  // ATTENTION: —Å–µ–π—á–∞—Å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–≤–∏—Å–Ω–µ—Ç
  while (fruits.length > 0) {
    // TODO: –¥–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    //
    // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ fruits, –∏—Å–ø–æ–ª—å–∑—É—è getRandomInt
    // –≤—ã—Ä–µ–∑–∞–µ–º –µ–≥–æ –∏–∑ fruits –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ result.
    // ex.: [1, 2, 3], [] => [1, 3], [2] => [3], [2, 1] => [], [2, 1, 3]
    // (–º–∞—Å—Å–∏–≤ fruits –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–∞—Ç—Å—è, –∞ result –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è)
    numRandom = Math.floor(Math.random()*fruits.length);
    result.push(fruits[numRandom]);
    fruits.splice(numRandom, 1);
  }

  fruits = result;

  if (JSON.stringify(fruits)===JSON.stringify(controlArr)) {
    alert ('–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–º–µ—à–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
  }
};

shuffleButton.addEventListener('click', () => {
  shuffleFruits();
  display();
});

/*** –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ***/

// —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞
const filterFruits = () => {
  let result=[];
  
    // TODO: –¥–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é
    if (parseInt(minWeight.value)==0 && parseInt(maxWeight.value)==0) {
      alert ('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.');
      return fruits;
    }
    if (parseInt(minWeight.value)<0 || parseInt(maxWeight.value)<0) {
      alert ('–í–µ—Å —Ñ—Ä—É–∫—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.');
      return fruits;
    }
    if (parseInt(minWeight.value) > parseInt(maxWeight.value)) {
      alert ('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.');
      return fruits;
    }

    for (let i=0; i < fruits.length; i++) {
      if ((fruits[i].weight >= parseInt(minWeight.value)) && (fruits[i].weight <= parseInt(maxWeight.value))) {
        result.push(fruits[i]);
      }
    }
    fruits = result;
};

filterButton.addEventListener('click', () => {
  filterFruits();
  display();
});

const filterFruitsClear = () => {
  fruits = [];
  fruits = archiveArr.slice();
  minWeight.value = 0;
  maxWeight.value = 0;
}

filterButtonClear.addEventListener('click', () => {
  filterFruitsClear();
  display();
  sortTimeLabel.textContent = '-';
})

/*** –°–û–†–¢–ò–†–û–í–ö–ê ***/

let sortKind = 'bubbleSort'; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let sortTime = '-'; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

let priority = ['–∫—Ä–∞—Å–Ω—ã–π', '–∂–µ–ª—Ç—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π'];
let start, end;
// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
sortKindLabel.textContent = sortKind;
sortTimeLabel.textContent = sortTime;

const comparationColor = (fruits1, k) => {
  return (fruits1.color === priority[k]) ? true:false;
};

function ColorToNum(arr) {
  for (c = 0; c < arr.length; c++) {
    switch(arr[c].color) {
      case '–∫—Ä–∞—Å–Ω—ã–π': arr[c].color = 0; break
      case '–∂–µ–ª—Ç—ã–π': arr[c].color = 1; break
      case '–∑–µ–ª–µ–Ω—ã–π': arr[c].color = 2; break
      case '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': arr[c].color = 3; break
      case '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': arr[c].color = 4; break
    }
  }
};

function NumToColor(arr) {
  for (c = 0; c < arr.length; c++) {
    switch(arr[c].color) {
      case 0 : arr[c].color = '–∫—Ä–∞—Å–Ω—ã–π'; break
      case 1 : arr[c].color = '–∂–µ–ª—Ç—ã–π'; break
      case 2 : arr[c].color = '–∑–µ–ª–µ–Ω—ã–π'; break
      case 3 : arr[c].color = '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π'; break 
      case 4 : arr[c].color = '—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π'; break   
    }
  }
};

function swap(items, firstIndex, secondIndex){
  const temp = items[firstIndex];
  items[firstIndex] = items[secondIndex];
  items[secondIndex] = temp;
};

function partition(items, left, right) {
  let pivot = items[Math.floor((right + left) / 2)].color,
      i = left,
      j = right;
  while (i <= j) {
      while (items[i].color < pivot) {
          i++;
      }
      while (items[j].color > pivot) {
          j--;
      }
      if (i <= j) {
          swap(items, i, j);
          i++;
          j--;
      }
  }
  return i;
};

function bubbleSort(arr, comparationColor) {
    // TODO: –¥–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—É–∑—ã—Ä—å–∫–æ–º
    const n = arr.length;
    for (let k = 0; k < priority.length; k++) {
      for (let i = 0; i < n-1; i++) {
        for (let j = 0; j < n-1-i; j++) {
          if (comparationColor (arr[j], k)) {
            let temp = arr[j+1];
            arr[j+1] = arr[j];
            arr[j] = temp;
          }
        }
      }
    }
};

function quickSort(items, left, right) {
// TODO: –¥–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  let index;
  if (items.length > 1) {
      left = typeof left != "number" ? 0 : left;
      right = typeof right != "number" ? items.length - 1 : right;
      index = partition(items, left, right);
      if (left < index - 1) {
          quickSort(items, left, index - 1);
      }
      if (index < right) {
          quickSort(items, index, right);
      }
  }
};


// –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
/*function startSort(sort, arr, comparationColor) {
      const start = new Date().getTime();
      sort(arr, comparationColor);
      const end = new Date().getTime();
      sortTime = `${end - start} ms`;
    },*/


sortChangeButton.addEventListener('click', () => {
  // TODO: –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ sortKind –º–µ–∂–¥—É 'bubbleSort' / 'quickSort'
  sortKind = (sortKind === 'bubbleSort') ? 'quickSort' : 'bubbleSort';
  sortKindLabel.textContent = sortKind;
});


function sort(typeSort) {
  switch (typeSort) {
    case 'bubbleSort' : 
      bubbleSort(fruits, comparationColor);
    break;
    case 'quickSort' :
      ColorToNum(fruits);
      quickSort(fruits, 0, (fruits.length - 1));
      NumToColor(fruits);
    break;
  }
};

sortActionButton.addEventListener('click', () => {
  // TODO: –≤—ã–≤–µ—Å—Ç–∏ –≤ sortTimeLabel –∑–Ω–∞—á–µ–Ω–∏–µ 'sorting...'
  // TODO: –≤—ã–≤–µ—Å—Ç–∏ –≤ sortTimeLabel –∑–Ω–∞—á–µ–Ω–∏–µ sortTime
  start = new Date().getTime(); 
  sort(sortKind);  
  end = new Date().getTime();
  sortTime = `${end - start} ms`;
  sortTimeLabel.textContent = sortTime;
  display(); 
});

/*** –î–û–ë–ê–í–ò–¢–¨ –§–†–£–ö–¢ ***/

addActionButton.addEventListener('click', () => {
  // TODO: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤ fruits
  // –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ—Ä–µ–º –∏–∑ kindInput, colorInput, weightInput
  if (kindInput.value === '' || colorInput.value === '' || weightInput.value === '' || parseInt(weightInput.value)<0) {
    alert ('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞. –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
  }
  else  {
    fruits.push ({kind:kindInput.value, color:colorInput.value, weight:parseInt(weightInput.value)});
  }
  kindInput.value = null;
  colorInput.value = null;
  weightInput.value = null;
  archiveArr = fruits.slice();
  display();
});
